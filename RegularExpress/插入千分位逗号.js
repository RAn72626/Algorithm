
function numFormat(num) {
    return num.replace(/(\d{1,3})(?=(\d{3})+(?:$|\.))/g, "$1,");

    // console.log("981515988434.43443442".replace(/(?=(?!\b)(\d{3})+$)/g, ","));
    // console.log("981515988434.43443442".replace(/(?=((\d{3})+(\.\d+)?$))(?<!(^\d+\.\d+))/g, ","));
}

const res = numFormat("9815159884343.4343434");
console.log(res)

// var pattern = /regex/flag, /regex/ 是正则，flag是控制筛选条件，g是global，i是忽略大小写
// 字符组[]，对[]中的字符进行匹配筛选, 比如：[abd], [a-c]. 字符组内可以使用脱字符(^)来求反

// \b: 匹配单词边界
// \d: [0-9], 表示是一位数字
// \D: [^0-9], 表示除数字之外的任意一种字符
// \w: [0-9a-zA-Z_], 表示数字，大小写字母和下划线
// \W: [^0-9a-zA-Z_], 表示非单词字符
// \s: [\t\v\n\r\f], 表示空白符
// \S: [^\t\v\n\r\f], 表示非空白符
// .:  通配符
// ? : 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。
// (?:): 括号 "(?:)" 范围的匹配结果不进行记录
// | : 左右两边表达式之间 "或" 关系

// $1 是占位符，用来表示正则中第几个（）匹配到的内容，从$1 开始
// 组()：一个组可以看做一个独立的规则区域
// ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)
// (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来

// {m,n}: 一个字符或一组字符可以重复出现的次数为m到n次。 {m}表示固定重复m次，{m,}表示至少重复m次
// $: 从末端开始匹配
// ?=n: 零宽度正预测先行断言，匹配任何其后紧接指定字符串 n 的字符串。匹配的是一个位置
// ?!n: 零宽度负预测先行断言，匹配任何其后没有紧接指定字符串 n 的字符串。匹配的是一个位置
// 前瞻：exp1(?=exp2) 查找exp2前面的exp1
// 后顾：(?<=exp2)exp1 查找exp2后面的exp1
// 负前瞻：exp1(?!exp2) 查找后面不是exp2的exp1
// 负后顾：(?<!exp2)exp1 查找前面不是exp2的exp1
